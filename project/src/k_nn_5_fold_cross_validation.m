function k_nn_5_fold_cross_validation (Train_array, Train_array_pos, Train_array_response, k)

    fprintf('Start of 5-fold cross validation\n');
    N = length(Train_array_pos);
    Train_array_category_1 = [];
    Train_array_category_1_pos = [];
    Train_array_category_2 = [];
    Train_array_category_2_pos = [];
    Train_array_category_3 = [];
    Train_array_category_3_pos = [];
    Train_array_category_4 = [];
    Train_array_category_4_pos = [];
    Train_array_category_5 = [];
    Train_array_category_5_pos = [];
    
    % Split train dataset to 5 arrays that contain elements from same
    % category
    for i = 1:N
        if (Train_array_response(i) == 1)
            Train_array_category_1 = [Train_array_category_1 Train_array(:,i)];
            Train_array_category_1_pos = [Train_array_category_1_pos; Train_array_pos(i, 1), Train_array_pos(i, 2)];
        elseif (Train_array_response(i) == 2)
            Train_array_category_2 = [Train_array_category_2 Train_array(:,i)];
            Train_array_category_2_pos = [Train_array_category_2_pos; Train_array_pos(i, 1), Train_array_pos(i, 2)];
        elseif (Train_array_response(i) == 3)
            Train_array_category_3 = [Train_array_category_3 Train_array(:,i)];
            Train_array_category_3_pos = [Train_array_category_3_pos; Train_array_pos(i, 1), Train_array_pos(i, 2)];
        elseif (Train_array_response(i) == 4)
            Train_array_category_4 = [Train_array_category_4 Train_array(:,i)];
            Train_array_category_4_pos = [Train_array_category_4_pos; Train_array_pos(i, 1), Train_array_pos(i, 2)];
        elseif (Train_array_response(i) == 5)
            Train_array_category_5 = [Train_array_category_5 Train_array(:,i)];
            Train_array_category_5_pos = [Train_array_category_5_pos; Train_array_pos(i, 1), Train_array_pos(i, 2)];
        end
    end
    
    % Number of elements per category
    N1 = size(Train_array_category_1, 2);
    N2 = size(Train_array_category_2, 2);
    N3 = size(Train_array_category_3, 2);
    N4 = size(Train_array_category_4, 2);
    N5 = size(Train_array_category_5, 2);
        
    % Create indexes for dataset splitting
    % Category 1
    index_category_1 = randperm(N1, N1);
    
    validation_splits_category_1 = {index_category_1(1:round(N1/5)); ...
        index_category_1(round(N1/5):round(2*N1/5)); ...
        index_category_1(round(2*N1/5):round(3*N1/5)); ... 
        index_category_1(round(3*N1/5):round(4*N1/5)); ...
        index_category_1(round(4*N1/5):end);};
    
    train_splits_category_1 = {[index_category_1(round(N1/5):end)]; ... 
        [index_category_1(1:round(N1/5)) index_category_1(round(2*N1/5):end)]; ...
        [index_category_1(1:round(2*N1/5)) index_category_1(round(3*N1/5):end)]; ... 
        [index_category_1(1:round(3*N1/5)) index_category_1(round(4*N1/5):end)]; ...
        [index_category_1(1:round(4*N1/5))];};
    
    % Category 2
    index_category_2 = randperm(N2, N2);
    
    validation_splits_category_2 = {index_category_2(1:round(N2/5)); ...
        index_category_2(round(N2/5):round(2*N2/5)); ...
        index_category_2(round(2*N2/5):round(3*N2/5)); ...
        index_category_2(round(3*N2/5):round(4*N2/5)); ...
        index_category_2(round(4*N2/5):end);};
    
    train_splits_category_2 = {[index_category_2(round(N2/5):end)]; ... 
        [index_category_2(1:round(N2/5)) index_category_2(round(2*N2/5):end)]; ...
        [index_category_2(1:round(2*N2/5)) index_category_2(round(3*N2/5):end)]; ... 
        [index_category_2(1:round(3*N2/5)) index_category_2(round(4*N2/5):end)]; ...
        [index_category_2(1:round(4*N2/5))];};
    
    % Category 3
    index_category_3 = randperm(N3, N3);
    
    validation_splits_category_3 = {index_category_3(1:round(N3/5)); ...
        index_category_3(round(N3/5):round(2*N3/5)); ...
        index_category_3(round(2*N3/5):round(3*N3/5)); ...
        index_category_3(round(3*N3/5):round(4*N3/5)); ...
        index_category_3(round(4*N3/5):end);};
    
    train_splits_category_3 = {[index_category_3(round(N3/5):end)]; ...
        [index_category_3(1:round(N3/5)) index_category_3(round(2*N3/5):end)]; ...
        [index_category_3(1:round(2*N3/5)) index_category_3(round(3*N3/5):end)]; ...
        [index_category_3(1:round(3*N3/5)) index_category_3(round(4*N3/5):end)]; ...
        [index_category_3(1:round(4*N3/5))];};
    
    % Category 4
    index_category_4 = randperm(N4, N4);
    
    validation_splits_category_4 = {index_category_4(1:round(N4/5)); ...
        index_category_4(round(N4/5):round(2*N4/5)); ...
        index_category_4(round(2*N4/5):round(3*N4/5)); ...
        index_category_4(round(3*N4/5):round(4*N4/5)); ...
        index_category_4(round(4*N4/5):end);};
    
    train_splits_category_4 = {[index_category_4(round(N4/5):end)]; ...
        [index_category_4(1:round(N4/5)) index_category_4(round(2*N4/5):end)]; ...
        [index_category_4(1:round(2*N4/5)) index_category_4(round(3*N4/5):end)]; ...
        [index_category_4(1:round(3*N4/5)) index_category_4(round(4*N4/5):end)]; ...
        [index_category_4(1:round(4*N4/5))];};
    
    % Category 5
    index_category_5 = randperm(N5, N5);
    
    validation_splits_category_5 = {index_category_5(1:round(N5/5)); ...
        index_category_5(round(N5/5):round(2*N5/5)); ...
        index_category_5(round(2*N5/5):round(3*N5/5)); ...
        index_category_5(round(3*N5/5):round(4*N5/5)); ... 
        index_category_5(round(4*N5/5):end);};
    
    train_splits_category_5 = {[index_category_5(round(N5/5):end)]; ...
        [index_category_5(1:round(N5/5)) index_category_5(round(2*N5/5):end)]; ...
        [index_category_5(1:round(2*N5/5)) index_category_5(round(3*N5/5):end)]; ...
        [index_category_5(1:round(3*N5/5)) index_category_5(round(4*N5/5):end)]; ...
        [index_category_5(1:round(4*N5/5))];};
    
    % Cross validation
    accuracy = 0;
    for fold=1:5 
        train_set = [];
        train_set_response = [];
        validation_set = [];
        validation_set_response = [];
        validation_set_pos = [];
        
        % Create datasets. In each fold the train/validation datasets are unique.
        % 80% of the full train set is assigned as train set
        % 20% of the full train set is assigned as validation set
        train_set = [train_set Train_array_category_1(:,train_splits_category_1{fold,1}) ...
            Train_array_category_2(:,train_splits_category_2{fold,1}) ...
            Train_array_category_3(:,train_splits_category_3{fold,1}) ...
            Train_array_category_4(:,train_splits_category_4{fold,1}) ...
            Train_array_category_5(:,train_splits_category_5{fold,1})];
    
        train_set_response = [train_set_response ones(1,size(Train_array_category_1(:,train_splits_category_1{fold,1}), 2)) ...
            2*ones(1,size(Train_array_category_2(:,train_splits_category_2{fold,1}), 2)) ... 
            3*ones(1,size(Train_array_category_3(:,train_splits_category_3{fold,1}), 2)) ...
            4*ones(1,size(Train_array_category_4(:,train_splits_category_4{fold,1}), 2)) ...
            5*ones(1,size(Train_array_category_5(:,train_splits_category_5{fold,1}), 2))];
        
        validation_set = [validation_set Train_array_category_1(:,validation_splits_category_1{fold,1}) ...
            Train_array_category_2(:,validation_splits_category_2{fold,1}) ...
            Train_array_category_3(:,validation_splits_category_3{fold,1}) ...
            Train_array_category_4(:,validation_splits_category_4{fold,1}) ...
            Train_array_category_5(:,validation_splits_category_5{fold,1})];
        
        validation_set_response = [validation_set_response ones(1,size(Train_array_category_1(:,validation_splits_category_1{fold,1}), 2)) ...
            2*ones(1,size(Train_array_category_2(:,validation_splits_category_2{fold,1}), 2)) ... 
            3*ones(1,size(Train_array_category_3(:,validation_splits_category_3{fold,1}), 2)) ...
            4*ones(1,size(Train_array_category_4(:,validation_splits_category_4{fold,1}), 2)) ...
            5*ones(1,size(Train_array_category_5(:,validation_splits_category_5{fold,1}), 2))];
        
        validation_set_pos = [validation_set_pos; Train_array_category_1_pos(validation_splits_category_1{fold,1}, 1) Train_array_category_1_pos(validation_splits_category_1{fold,1}, 2); ...
            Train_array_category_2_pos(validation_splits_category_2{fold,1}, 1) Train_array_category_2_pos(validation_splits_category_2{fold,1}, 2); ... 
            Train_array_category_3_pos(validation_splits_category_3{fold,1}, 1) Train_array_category_3_pos(validation_splits_category_3{fold,1}, 2); ... 
            Train_array_category_4_pos(validation_splits_category_4{fold,1}, 1) Train_array_category_4_pos(validation_splits_category_4{fold,1}, 2); ...
            Train_array_category_5_pos(validation_splits_category_5{fold,1}, 1) Train_array_category_5_pos(validation_splits_category_5{fold,1}, 2);];
              
        fprintf('\nFold %d\n', fold);
        [fold_accuracy, set_estimations] = k_nn_algorithm(train_set, train_set_response, validation_set, validation_set_response, k);
        accuracy = accuracy + fold_accuracy;
    end
    
    avg_accuracy = accuracy / 5;
    fprintf('End of 5-fold cross validation\n');
    fprintf('Average Accuracy: %.2f%% with k=%d\n', avg_accuracy, k);
         
end